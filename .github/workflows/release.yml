name: Release Build

on:
  workflow_dispatch:

jobs:
  build-and-package:
    strategy:
      matrix:
        include:
          # Linux builds
          - os: ubuntu-latest
            platform: linux
            arch: x64
            rust_target: x86_64-unknown-linux-gnu
            linker: gcc
            vscode_target: linux-x64
          - os: ubuntu-latest
            platform: linux
            arch: arm64
            rust_target: aarch64-unknown-linux-gnu
            linker: aarch64-linux-gnu-gcc
            vscode_target: linux-arm64
          - os: ubuntu-latest
            platform: linux
            arch: armhf
            rust_target: armv7-unknown-linux-gnueabihf
            linker: arm-linux-gnueabihf-gcc
            vscode_target: linux-armhf
          # Alpine Linux builds
          - os: ubuntu-latest
            platform: alpine
            arch: x64
            rust_target: x86_64-unknown-linux-musl
            linker: musl-gcc
            vscode_target: alpine-x64
          - os: ubuntu-latest
            platform: alpine
            arch: arm64
            rust_target: aarch64-unknown-linux-musl
            linker: aarch64-linux-musl-gcc
            vscode_target: alpine-arm64
          # Windows builds
          - os: windows-latest
            platform: win32
            arch: x64
            rust_target: x86_64-pc-windows-msvc
            vscode_target: win32-x64
          - os: windows-latest
            platform: win32
            arch: arm64
            rust_target: aarch64-pc-windows-msvc
            vscode_target: win32-arm64
          # macOS builds
          - os: macos-latest
            platform: darwin
            arch: x64
            rust_target: x86_64-apple-darwin
            vscode_target: darwin-x64
          - os: macos-latest
            platform: darwin
            arch: arm64
            rust_target: aarch64-apple-darwin
            vscode_target: darwin-arm64

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust_target }}

      # Install cross-compilation tools for Linux ARM targets
      - name: Install ARM cross-compilation tools
        if: matrix.platform == 'linux' && (matrix.arch == 'arm64' || matrix.arch == 'armhf')
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf

      # Install musl tools for Alpine builds
      - name: Install musl tools
        if: matrix.platform == 'alpine'
        run: |
          sudo apt-get update
          sudo apt-get install -y musl-tools musl-dev
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            # Add universe repository for cross-compilation tools
            sudo add-apt-repository universe
            sudo apt-get update
            # Install cross-compilation tools for arm64
            sudo apt-get install -y gcc-aarch64-linux-gnu
            sudo ln -s /usr/bin/aarch64-linux-gnu-gcc /usr/local/bin/aarch64-linux-musl-gcc
          fi

      # Configure Rust target linker
      - name: Configure target linker
        if: matrix.platform == 'linux' || matrix.platform == 'alpine'
        run: |
          mkdir -p ~/.cargo
          echo "[target.${{ matrix.rust_target }}]" >> ~/.cargo/config.toml
          echo "linker = \"${{ matrix.linker }}\"" >> ~/.cargo/config.toml
          if [ "${{ matrix.platform }}" = "alpine" ]; then
            echo "rustflags = [\"-C\", \"target-feature=+crt-static\", \"-C\", \"link-arg=-static\"]" >> ~/.cargo/config.toml
          else
            echo "rustflags = [\"-C\", \"target-feature=+crt-static\"]" >> ~/.cargo/config.toml
          fi

      - name: Set CC environment variable for Linux builds
        if: matrix.platform == 'linux' || matrix.platform == 'alpine'
        run: |
          export CC=${{ matrix.linker }}
          if [ "${{ matrix.platform }}" = "alpine" ]; then
            export RUSTFLAGS="-C target-feature=+crt-static -C link-arg=-static"
          else
            export RUSTFLAGS="-C target-feature=+crt-static"
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Extension Dependencies
        run: |
          cd extension
          npm ci
          npm install -g @vscode/vsce

      - name: Build Language Server
        run: |
          cd language-server
          chmod +x build-language-server.sh
          ./build-language-server.sh --ci ${{ matrix.platform }} ${{ matrix.arch }}

      - name: Compile TypeScript
        run: |
          cd extension
          npm run build

      - name: Build VSIX Package
        run: |
          cd extension
          vsce package --target ${{ matrix.vscode_target }}

      - name: Upload VSIX Package
        uses: actions/upload-artifact@v4
        with:
          name: solana-${{ matrix.vscode_target }}.vsix
          path: extension/*.vsix
